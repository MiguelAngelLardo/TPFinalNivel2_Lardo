<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAA
        AEQAAAByAAAAcgAAAEMAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ADsGBwzkEhYq8TA4bvovN236EhUp8QYHDOMAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAA8BQYN9E1bs/9gcd7/Qk+a/0JPmv9gct//TFqx/wUGDfQAAAA6AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAwYHDOVOXLT/RFCd+wUGDPIGCBCkBggQpAUFDPNEUZ77TFqx/wYHDOMAAAADAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABEExYr8V9x3f8FBQzzAAAAIgAAAAAAAAAAAAAAIwUFDPNgcd7/EhUp8QAA
        AEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAWwAAAIgAAACIAAAAiAAAALswOG/6Qk6Z/wYIEKMAAAABAAAAWwAAAFoAAAABCAkRpUJP
        mv8vOG75AAAAugAAAIgAAACIAAAAfAAAACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        mAAAf4AAAH/4AAB/+AAAf/wBAH/+AQB//wc=
</value>
  </data>
</root>